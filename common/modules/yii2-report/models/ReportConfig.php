<?php
namespace lcssoft\report\models;

use lcssoft\report\handler\ReportAccessInterface;
use lcssoft\report\helpers\Utilities;
use kartik\widgets\ActiveForm;
use yii\base\InvalidValueException;
use yii\base\Model;
use yii\web\View;

class ReportConfig extends \yii\base\Model
{
    public $reportObjectClass;
    public $reportObjectFormAttributes = [];
    public $reportObjectLabel;
    public $reportObjectParams;
    public $reportObjectAccess;
    public $reportTemplateView;
    public $reportObjectDefaultAttributeValues;

    private $_reportForm;

    /**
     * @var Model
     */
    private $_object;

    private $_fields = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (empty($this->reportObjectClass)) {
            throw new InvalidValueException("reportObjectClass is required!");
        }

        if (empty($this->reportObjectLabel)) {
            throw new InvalidValueException("reportObjectLabel is required!");
        }

//        if (empty($this->reportObjectAccess)) {
//            throw new InvalidValueException("reportObjectAccess is required!");
//        }

        $this->_object = \Yii::createObject(['class' => $this->reportObjectClass]);
        $this->initDefaultAttributeValues();

        $this->_reportForm = ActiveForm::begin([]);
        $this->initField();
    }

    /**
     * @return \yii\base\Widget
     */
    public function renderForm()
    {
        return $this->_reportForm;
    }

    /**
     * @return \yii\base\Widget
     */
    public function renderEndForm()
    {
        return eval(get_class($this->_reportForm) . "::end();");
    }

    public function initField()
    {

        foreach ($this->reportObjectFormAttributes as $attributeConfig) {

            $tempAttributeConfig = $attributeConfig;

            if(!is_array($attributeConfig)){
                $attributeConfig = [
                    'class' => ReportDataField::class,
                    'attribute' => $tempAttributeConfig,
                ];
            }

            if (!isset($attributeConfig['class'])) {
                $attributeConfig['class'] = ReportDataField::class;
            }

            $attributeConfig['model'] = $this->_object;
            $attributeConfig['form'] = $this->_reportForm;

            $this->_fields[] = \Yii::createObject($attributeConfig);
        }
    }

    /**
     * @return ReportDataField []
     */
    public function getFields()
    {
        return $this->_fields;
    }

    /**
     * @return Model
     */
    public function getObject()
    {
        return $this->_object;
    }

    public function getReportObjectParams($params)
    {
        if (empty($params)) {
            return [];
        }

        if (empty($this->reportObjectParams)) {
            return $params;
        }

        if ($this->reportObjectParams instanceof \Closure) {
            $this->reportObjectParams = call_user_func_array($this->reportObjectParams, ['model' => $this->_object, 'parameters' => $params]);
        }

        if (!empty($this->reportObjectParams) && !is_array($this->reportObjectParams)) {
            throw new InvalidValueException("ReportObjectParams must be an array value !!");
        }

        return $this->reportObjectParams;
    }

    public function renderTemplateView(View $view)
    {
        return $view->render($this->reportTemplateView, [
            'model' => $this->_object,
            'form' => $this->_reportForm,
        ]);
    }

    public function initDefaultAttributeValues()
    {

        if (is_array($this->reportObjectDefaultAttributeValues) && !empty($this->reportObjectDefaultAttributeValues)) {

            foreach ($this->reportObjectDefaultAttributeValues as $attribute => $attributeValue) {
                if ($this->_object->hasProperty($attribute) && !is_array($attributeValue)) {
                    $this->_object->{$attribute} = $attributeValue;
                }
            }
        }
    }

    public function checkAccess()
    {
        if(Utilities::hasRole("Admin", \Yii::$app->user->id)){
            return true;
        }

        if (!empty($this->reportObjectAccess)) {

            $arrayAccess = $this->reportObjectAccess;
            if (!is_array($arrayAccess)) {
                $arrayAccess = [$this->reportObjectAccess];
            }

            if($arrayAccess[0] instanceof ReportAccessInterface){

                foreach ($arrayAccess as $access){
                    if($access->checkAccess()){
                        return true;
                    }
                }

            } else {

                foreach ($arrayAccess as $access) {
                    if (\Yii::$app->user->can($access) || Utilities::hasRole($access, \Yii::$app->user->id)) {
                        return true;
                    }
                }

            }
        }
        return false;
    }
}