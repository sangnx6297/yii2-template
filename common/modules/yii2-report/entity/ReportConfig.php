<?php

namespace lcssoft\report\entity;


use lcssoft\report\handler\ReportAccessInterface;
use lcssoft\report\handler\ReportConfigurationAbstract;
use lcssoft\report\handler\ReportConfigurationInterface;
use lcssoft\report\handler\ReportConfigViewTemplateInterface;
use lcssoft\report\handler\ReportHiddenColumnInterface;
use lcssoft\report\handler\ReportViewInterface;
use lcssoft\report\helpers\Utilities;
use lcssoft\report\models\ReportAssignment;
use lcssoft\report\models\ReportAssignmentCustom;
use lcssoft\report\models\ReportDefaultView;
use lcssoft\report\models\ReportHiddenColumn;
use Yii;
use yii\db\Exception;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
/**
 * This is the model class for table "erp_report_config".
 *
 * @property int $id
 * @property string $object_class
 * @property string $object_type
 * @property string $type
 * @property string $description
 *
 * @property ReportMeta[] $reportMetas
 */
class ReportConfig extends \yii\db\ActiveRecord
{

    private $_ruleInstance;
    private $_reportInstance;

    public $items;
    public $class;

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        if ($this->type) {
            $this->_ruleInstance = Yii::createObject(['class' => $this->type, 'id_report_config' => $this->id]);
        }

        if ($this->object_class) {
            $this->_reportInstance = Yii::createObject(['class' => $this->object_class, 'type' => $this->object_type]);
        }

    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'erp_report_config';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['items', 'class'],'safe'],
            [['object_class', 'object_type', 'type', 'description'], 'string', 'max' => 255],
            [['object_class', 'object_type', 'type'], 'unique', 'targetAttribute' => ['object_class', 'object_type', 'type']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'object_class' => Yii::t('backend', 'Mẫu'),
            'object_type' => Yii::t('backend', 'Report Type'),
            'type' => Yii::t('backend', 'Rule'),
            'description' => Yii::t('backend', '@@Description'),
            'ruleLabel'  => Yii::t('backend', 'Rule'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReportMetas()
    {
        return $this->hasMany(ReportMeta::className(), ['id_report_config' => 'id']);
    }

    /**
     * @param $object_class
     * @param $rule_class
     * @return \yii\db\ActiveQuery
     * @throws Exception
     */
    public static function getConfig($object_class, $rule_class)
    {
        $config = \Yii::$app->authManager;
        $userId = \Yii::$app->user->id;
        $roles = $config->getRolesByUser($userId);
        $roles = ArrayHelper::getColumn($roles, 'name');
        $permissions = $config->getPermissionsByUser($userId);
        $permissions = ArrayHelper::getColumn($permissions, 'name');

        $config = ($rule_class)::find()->alias('m')->select([
            'c.object_type',
            'm.class',
            'm.key',
            'm.value',
            'm.extra_data',
        ])->innerJoin(self::tableName() . ' c', 'c.id = m.id_report_config')
            ->where([
                'or',
                ['m.value' => $userId],
                ['m.value' => $roles],
                ['m.value' => $permissions],
            ])->andWhere(['c.object_class' => $object_class, 'm.class' => $rule_class]);

        return $config;
    }

    /**
     * @param $object_class
     * @return ReportViewInterface
     * @throws Exception
     */
    public static function getDefaultView($object_class)
    {
       $defaultView = self::getConfig($object_class, ReportDefaultView::class)->one();
       if($defaultView){
           return ($defaultView->class)($defaultView);
       }
       return null;
    }

    /**
     * @param $object_class
     * @return ReportMeta[]
     * @throws Exception
     */
    public static function getAssignment($object_class)
    {
        return self::getConfig($object_class, ReportAssignment::class)->all();
    }


    /**
     * @param $object_class
     * @return ReportMeta[]
     * @throws Exception
     */
    public static function getAssignmentByCustomData($object_class, $object_type)
    {
        $config = self::getConfig($object_class, ReportAssignmentCustom::class)
            ->andWhere(['c.object_type' => $object_type, 'm.class' => ReportAssignmentCustom::class])->all();
        return ArrayHelper::getColumn($config, 'key');
    }

    /**
     * @param $object_class
     * @return mixed
     * @throws Exception
     */
    public static function getHiddenColumns($object_class, $report_type)
    {
        $configs = self::getConfig($object_class, ReportHiddenColumn::class)->andFilterWhere(['c.object_type' => $report_type])->all();
        $columns = [];
        foreach ($configs as $hiddenConfig) {
            if ($hiddenConfig instanceof ReportHiddenColumnInterface) {
               $columns = array_merge($hiddenConfig->getHiddenColumns(), $columns);
               $columns = array_unique($columns);
            }
        }
        return $columns;
    }


    public function getRuleLabel()
    {
        return self::getRuleLabelByRule($this->_ruleInstance);
    }

    public static function getRuleLabelByRule($instance)
    {

        if ($instance instanceof ReportAccessInterface) {
            return Yii::t('backend', 'Phân Quyền');
        }

        if ($instance instanceof ReportHiddenColumnInterface) {
            return Yii::t('backend', 'Ẩn Cột Excel');
        }

        if ($instance instanceof ReportViewInterface) {
            return Yii::t('backend', 'Load mặc định');
        }

        return null;
    }



    public function getReportInstance(){

        return $this->_reportInstance;
    }


    public function getRuleInstance(){

        return $this->_ruleInstance;
    }

    public function assign(){
        $command = Yii::$app->db->createCommand();
        foreach ($this->items as $item) {
            $data = [
                'id_report_config' => $this->id,
                'class' => $this->type,
                'key' => $this->class,
                'value' => $item
            ];
            $command->insert(ReportMeta::tableName(),$data)->execute();
        }
    }

    public function remove(){
        $command = Yii::$app->db->createCommand();
        foreach ($this->items as $item) {
            $data = [
                'id_report_config' => $this->id,
                'class' => $this->type,
                'key' => $this->class,
                'value' => $item
            ];
            $command->delete(ReportMeta::tableName(),$data)->execute();
        }
    }

    public function getAvailableAccess($type){
        $method = Utilities::camelizeString($type);
        $method = "available{$method}";
        if(!$this->hasMethod($method)){
            return ["Method $method not found"];
        }
        return $this->{$method}();
    }

    public function getAssignedAccess($type)
    {
        $method = Utilities::camelizeString($type);
        $method = "assigned{$method}";
        if(!$this->hasMethod($method)){
            return ["Method $method not found"];
        }
        return $this->{$method}();
    }

    public function availableRole(){
        $roles = Yii::$app->authManager->getRoles();
        $roles = ArrayHelper::getColumn($roles, 'name');
        $assignedRole = $this->assignedRole();
        return array_diff($roles, $assignedRole);
    }

    public function assignedRole()
    {
      $assignedRoles = self::getReportMetas()->where(['key' => ReportMeta::TYPE_ROLE])->asArray()->all();
      return ArrayHelper::getColumn($assignedRoles, 'value');
    }

    public function availablePermission()
    {
        $permissions = Yii::$app->authManager->getPermissions();
        $permissions = ArrayHelper::getColumn($permissions, 'name');
        $permissions = array_filter($permissions, function ($item){
           $pattern = "(/[a-z]*([-]?[a-z]*)*)(/[a-z]*([-]?[a-z]*)*)*";
           return !preg_match("#$pattern#", $item);
        });
        $assignedPermissions= $this->assignedPermission();
        return array_diff($permissions, $assignedPermissions);
    }

    public function assignedPermission()
    {
        $assignedPermissions = self::getReportMetas()->where(['key' => ReportMeta::TYPE_PERMISSION])->asArray()->all();
        return ArrayHelper::getColumn($assignedPermissions, 'value');
    }

    public function availableUser()
    {

        $users = Yii::$app->cache->getOrSet('list_user_custom_2', function (){
            $temp = User::find()->select(['id_user as id', new Expression('CONCAT_WS(\' - \',username,full_name) as text'), 'username'])->asArray()->all();
            return ArrayHelper::index($temp, 'username');
        }, 60 * 60 * 24 * 7);

        $assignedUsers = $this->assignedUser();
        if(empty($assignedUsers)){
            return $users;
        }
        return array_diff_key($users, $assignedUsers);
    }

    public function assignedUser()
    {
        $assignedUsers= self::getReportMetas()->where(['key' => ReportMeta::TYPE_USER])->asArray()->all();
        if(empty($assignedUsers)){
            return [];
        }
        $users = User::find()->select(['id_user as id', new Expression('CONCAT_WS(\' - \',username,full_name) as text'), 'username'])->where(['id_user' => ArrayHelper::getColumn($assignedUsers,'value')])->asArray()->all();
        return ArrayHelper::index($users, 'username');
    }


    public function availableCustom()
    {

    }

    public function assignedCustom()
    {

    }

}
